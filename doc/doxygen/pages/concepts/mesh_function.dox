/**
@page mesh_function MeshFunction

## Description

A mesh function is a function object that can be evaluated at any point on the mesh.

Conceptually, a mesh function assigns to every point on the mesh an object such as a `double` or an `Eigen::Matrix2d`.

For efficiency reasons, a mesh function is normally evaluated at a number of points at once.
Hence a mesh function must overload the bracket operator as follows:
```
std::vector<T> operator()(const lf::mesh::Entity& e, const Eigen::MatrixXd& local) const
```
Here 
- `e` is a \ref lf::mesh::Entity "mesh entity"
- `local` is a matrix of size `(e.RefEl().Dimension()) x NumPoints` and lists the local coordinates of the evaluation points (with respect to the reference element `e.RefEl()`).
- `T` is more or less arbitrary type such as a `double` or a `Eigen::Matrix2d`

The return type of `operator()` is a `std::vector` with `NumPoints` length.

## Requirements

The type `MF` satisfies `MeshFunction` if

Given
- `e`, a mesh entity of type `lf::mesh::Entity`,
- `local`, a set of local coordinates of type `Eigen::MatrixXd`
- `a`, `b` objects of type `MF`

the following expressions are valid:

<table>
<tr> <th>expression  <th>return type     <th>semantics
<tr> <td> `MF(a)`             <td> `MF`     <td> Creates a copy of `a`
<tr> <td> `MF(std::move(a))` <td> `MF`      <td> "steals" `a` to create a new MeshFunction
<tr> <td> `a(e, local)` <td> `std::vector<T>` <td>Evaluates mesh function at points `local`
</table>


*/